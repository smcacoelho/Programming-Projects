class Pokemon:
  def __init__(self, name, max_health):
    self.name = name
    self.level = 1
    self.max_health = max_health
    self.health = max_health
    self.ko = False
    self.xp = 0
    

  def lose_health(self, value):
    self.health-=value
    if self.health <= 0:
      self.knock_out()
    else:
      print(f"{self.name} just lost {value} health. {self.health}/{self.max_health}")
    
  def gain_health(self): #called after drinking a potion
    if self.health == self.max_health:
      print(f"pokemon has full health")
    else:
      self.health = self.max_health
      print(f"{self.name} is fully healed")
  
  def knock_out(self):
    self.ko = True
    print(f"{self.name} just got knocked out")

  def revive(self):
    self.ko = False
    print(f"{self.name} was revived")

  def gain_xp(self):
    self.xp+=1
    if self.xp % 10 == 0:
      self.evolve()
      print(f"{self.name} passed to level {self.level}")
  
  def evolve(self): #when pokemon evolves it has its health regenerated, and max_health is increased
    self.xp = 0
    self.level+=1
    self.max_health+=2 
    self.health = self.max_health   
  
  def attack(self,pokemon):
    if pokemon.ko:
      print(f"{pokemon.name} is ko already. You cannot attack")
    elif self.ko:
      print(f"{self.name} is ko cannot attack. Please change pokemon or heal it")
    elif self.type == pokemon.type:
        pokemon.lose_health(self.level)
        self.gain_xp()
    else:
      self.gain_xp()      
      return True

  def __repr__(self): #when object is printed name is returned
    return self.name



class Trainer:
  def __init__(self,name,potions, pokemons):
    self.name = name
    self.potions = potions
    self.pokemons = pokemons
    self.active = pokemons[0]
  
  def takePotion(self):
    print(f"{self.name} took a potion")
    if self.active.health == self.active.max_health:
      print(f"{self.name}.{self.active.name} has full energy")
    else:
      self.revive()
      self.active.gain_health();
      self.potions-=1
      print(f"{self.name} has {self.potions} potions left")
  
  def switchActive(self,index):
    
    if index >= len(self.pokemons) or index < 0 :
      print(f"{self.name} pokemon number {index} does not exist")
    elif self.pokemons[index].ko:
      print(f"{self.name} pokemon number {index} is ko, choose another one or heal it")
    elif self.pokemons[index] == self.active:
      print(f" {self.name} You cannot change to your current pokemon")
    else:
      self.active = self.pokemons[index]
      print(f"{self.name} active pokemon changed to {self.active.name}")
  
  def attack(self,trainer):
    print(f"{self.name}.{self.active.name} attacks {trainer.name}.{trainer.active.name}")
    self.active.attack(trainer.active)



#Child classes

class Grass(Pokemon):
  def __init__(self, name, max_health):
    super().__init__(name, max_health)
    self.type = "grass"
  
  def attack(self,pokemon):
    self.gain_xp()
    if super().attack(pokemon): #will only do damage if the checks on parent attack() are false and True is returned 
      if pokemon.type == "fire" or pokemon.type == "water":
        pokemon.lose_health(0.5*pokemon.level)
      else:
        print(f"Invalid pokemon")

class Fire(Pokemon):
  def __init__(self, name, max_health):
    super().__init__(name, max_health)
    self.type = "fire"

  def attack(self,pokemon):
    if super().attack(pokemon):
      self.gain_xp()
      if pokemon.type == "grass":
        pokemon.lose_health(2*pokemon.level)
      elif pokemon.type == "water":
        pokemon.lose_health(0.5*pokemon.level)
      else:
        print(f"Invalid pokemon")
    

class Water(Pokemon):
  def __init__(self, name, max_health):
    super().__init__(name, max_health)
    self.type = "water"

  def attack(self, pokemon):
    if super().attack(pokemon):
      self.gain_xp()
      if pokemon.type == "grass":
        pokemon.lose_health(2*pokemon.level)
      elif pokemon.type == "fire":
        pokemon.lose_health(2*pokemon.level)
      else:
        print(f"Invalid pokemon")
  

#Game
squirtle = Water("Squirtle", 2)
bulbazur = Grass("Bulbazur", 3)
charizard = Fire("Charizard", 5)
venusaur = Grass("Venusaur", 4)
blastoise = Water("Blastoise", 3)
charmeleon = Fire("Charmeleon", 6)

Ash = Trainer("Ash", 4, [blastoise,charizard,bulbazur])
Erika = Trainer("Erika", 3, [venusaur,squirtle,charmeleon])

Ash.attack(Erika)
Ash.attack(Erika)
Erika.attack(Ash)
Erika.switchActive(2)
Ash.attack(Erika)
Erika.attack(Ash)
Ash.attack(Erika)
Ash.attack(Erika)
Erika.attack(Ash)
Erika.switchActive(0)
Erika.takePotion()
Erika.attack(Ash)
Ash.attack(Erika)

