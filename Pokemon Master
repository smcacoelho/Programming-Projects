class Pokemon:
  def __init__(self,name, level, type, max_health):
    self.name = name
    self.level = level
    self.type = type
    self.max_health = max_health
    self.health = max_health
    self.ko = False

  def lose_health(self, value):
    self.health-=value
    if self.health <= 0:
      self.knock_out()
    else:
      print(f"{self.name} just lost {value} health. {self.health}/{self.max_health}")
    
  def gain_health(self):
    self.health = self.max_health
    print(f"{self.name} is fully healed")
  
  def knock_out(self):
    self.ko = True
    print(f"{self.name} just got knocked out\n")

  def revive(self):
    self.ko = False
    print(f"{self.name} was revived\n")
  
  def attack(self,pokemon):
    if self.ko:
      print(f"{self.name} is ko cannot attack. Please change pokemon or heal it\n")
    else:
      if self.type == pokemon.type:
        pokemon.lose_health(self.level)
      
      if self.type == "grass":
        pokemon.lose_health(0.5*self.level)
     
      if self.type == "water" and pokemon.type == "fire":
        pokemon.lose_health(0.5*self.level)
      
      if self.type == "water" and pokemon.type == "grass":
        pokemon.lose_health(2*self.level)
      
      if self.type == "fire" and pokemon.type == "grass":
        pokemon.lose_health(2*self.level)

      if self.type == "fire" and pokemon.type == "water":     
        pokemon.lose_health(0.5*self.level)

  def __repr__(self): #when object is printed name is returned
    return self.name

class Trainer:
  def __init__(self,name,potions, pokemons):
    self.name = name
    self.potions = potions
    self.pokemons = pokemons
    self.active = pokemons[0]
  
  def takePotion(self):
    if self.active.health == self.active.max_health:
      print(f"{self.active.name} has full energy")
    else:
      self.active.gain_health();
      self.potions-=1
      print(f"{self.potions} potions left\n")
  
  def switchActive(self,index):
    print(f"Change to active pokemon number {index}")
    if index >= len(self.pokemons) or index < 0 :
      print(f"{self.pokemons[index]} does not exist\n")
    elif self.pokemons[index].ko:
      print(f"{self.pokemons[index]} is ko, choose another one or heal it\n")
    elif self.pokemons[index] == self.active:
      print(f"You cannot change to your current pokemon\n")
    else:
      self.active.name = self.pokemons[index]
      print(f"{self.name} active pokemon changed to {self.active.name}\n")
  
  def attack(self,trainer):
    print(f"{self.active.name} attacks {trainer.active.name}")
    self.active.attack(trainer.active)
  
  
squirtle = Pokemon("Squirtle", 1, "water", 2)
bulbazur = Pokemon("Bulbazur", 1, "grass", 3)
charizard = Pokemon("Charizard", 1, "fire", 2)
Ash = Trainer("Ash", 4, [squirtle,charizard,bulbazur])
Erika = Trainer("Erika", 3, [bulbazur,squirtle,charizard])
Ash.attack(Erika);
Ash.attack(Erika);
Erika.attack(Ash);
Erika.attack(Ash);
Ash.attack(Erika)
Ash.switchActive(1)
Erika.switchActive(0)
Ash.attack(Erika)
Ash.takePotion()
Ash.attack(Erika)
