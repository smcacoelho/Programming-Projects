class Pokemon:
  def __init__(self,name, level, type, max_health):
    self.name = name
    self.level = level
    self.type = type
    self.max_health = max_health
    self.health = max_health
    self.ko = False
    self.xp = 0

  def lose_health(self, value):
    self.health-=value
    if self.health <= 0:
      self.knock_out()
    else:
      print(f"{self.name} just lost {value} health. {self.health}/{self.max_health}")
    
  def gain_health(self): #called after drinking a potion
    if self.health == self.max_health:
      print(f"pokemon has full health")
    else:
      self.health = self.max_health
      print(f"{self.name} is fully healed")
  
  def knock_out(self):
    self.ko = True
    print(f"{self.name} just got knocked out")

  def revive(self):
    self.ko = False
    print(f"{self.name} was revived")

  def gain_xp(self, value):
    self.xp+=value
    if self.xp % 10 == 0:
      self.evolve()
      print(f"{self.name} passed to level {self.level}")
  
  def evolve(self): #when pokemon evolves it has health regenrated, and max_health value is increased
    self.xp = 0
    self.level+=1
    self.max_health+=2    
  
  def attack(self,pokemon):
    if pokemon.ko:
      print(f"{pokemon.name} is ko already. You cannot attack")
    elif self.ko:
      print(f"{self.name} is ko cannot attack. Please change pokemon or heal it")
    else:
      if self.type == pokemon.type:
        pokemon.lose_health(self.level)
        self.gain_xp(2)
      
      elif self.type == "grass":
        pokemon.lose_health(0.5*self.level)
        self.gain_xp(4)
     
      elif self.type == "water" and pokemon.type == "fire":
        pokemon.lose_health(0.5*self.level)
        self.gain_xp(4)
      
      elif self.type == "water" and pokemon.type == "grass":
        pokemon.lose_health(2*self.level)
        self.gain_xp(8)
      
      elif self.type == "fire" and pokemon.type == "grass":
        pokemon.lose_health(2*self.level)
        self.gain_xp(8)

      elif self.type == "fire" and pokemon.type == "water":     
        pokemon.lose_health(0.5*self.level)
        self.gain_xp(4)
      else:
        print(f"Not valid pokemon")

  def __repr__(self): #when object is printed name is returned
    return self.name

class Trainer:
  def __init__(self,name,potions, pokemons):
    self.name = name
    self.potions = potions
    self.pokemons = pokemons
    self.active = pokemons[0]
  
  def takePotion(self):
    if self.active.health == self.active.max_health:
      print(f"{self.name}.{self.active.name} has full energy")
    else:
      self.active.gain_health();
      self.potions-=1
      print(f"{self.name}.{self.potions} potions left")
  
  def switchActive(self,index):
    
    if index >= len(self.pokemons) or index < 0 :
      print(f"{self.name} pokemon number {index} does not exist")
    elif self.pokemons[index].ko:
      print(f"{self.name} pokemon number {index} is ko, choose another one or heal it")
    elif self.pokemons[index] == self.active:
      print(f" {self.name} You cannot change to your current pokemon")
    else:
      self.active = self.pokemons[index]
      print(f"{self.name} active pokemon changed to {self.active.name}")
  
  def attack(self,trainer):
    print(f"{self.name}.{self.active.name} attacks {trainer.name}.{trainer.active.name}")
    self.active.attack(trainer.active)
  
class Water(Pokemon):
  def __init__(self,name, level, type, max_health):
    super().__init__(self,name, level, type, max_health)
    self.type = "water"
    self.name = name
    self.level = level
    self.max_health = max_health
    self.health = max_health
    self.ko = False
    self.xp = 0
  
  def dealDamage(self,pokemon):
    if(pokemon.type == self.type):
      
    

class Grass(Pokemon):

class Fire(Pokemon):


squirtle = Pokemon("Squirtle", 1, "water", 2)
bulbazur = Pokemon("Bulbazur", 1, "grass", 3)
charizard = Pokemon("Charizard", 1, "fire", 9)
venusaur = Pokemon("Venusaur", 1, "grass", 5)
blastoise = Pokemon("Blastoise",1,"water",8)
charmeleon = Pokemon("Charmeleon", 1, "fire", 9)

Ash = Trainer("Ash", 4, [blastoise,charizard,bulbazur])
Erika = Trainer("Erika", 3, [venusaur,squirtle,charmeleon])
Ash.attack(Erika)
print(Ash.active.health)
Ash.attack(Erika)
print(Ash.active.health)
Erika.attack(Ash)
print(Ash.active.health)
Erika.switchActive(1)
print(Erika.active.health)
print(Ash.active.health)


Ash.attack(Erika)
print(Ash.active.health)
print(Erika.active.health)
Erika.attack(Ash)
print(Ash.active.health)
Erika.switchActive(1)
Ash.attack(Erika)
Ash.takePotion()
Ash.attack(Erika)



